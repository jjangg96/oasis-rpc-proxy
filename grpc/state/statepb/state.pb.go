// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: grpc/state/statepb/state.proto

package statepb

import (
	context "context"
	accountpb "github.com/jjangg96/oasis-rpc-proxy/grpc/account/accountpb"
	debondingdelegationpb "github.com/jjangg96/oasis-rpc-proxy/grpc/debondingdelegation/debondingdelegationpb"
	delegationpb "github.com/jjangg96/oasis-rpc-proxy/grpc/delegation/delegationpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegistryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DebugAllowUnroutableAddresses is true iff node registration should
	// allow unroutable addreses.
	DebugAllowUnroutableAddresses bool `protobuf:"varint,1,opt,name=debug_allow_unroutable_addresses,json=debugAllowUnroutableAddresses,proto3" json:"debug_allow_unroutable_addresses,omitempty"`
	// DebugAllowTestRuntimes is true iff test runtimes should be allowed to
	// be registered.
	DebugAllowTestRuntimes bool `protobuf:"varint,2,opt,name=DebugAllowTestRuntimes,proto3" json:"DebugAllowTestRuntimes,omitempty"`
	// DebugBypassStake is true iff the registry should bypass all of the staking
	// related checks and operations.
	DebugBypassStake bool `protobuf:"varint,4,opt,name=DebugBypassStake,proto3" json:"DebugBypassStake,omitempty"`
	// DisableRuntimeRegistration is true iff runtime registration should be
	// disabled outside of the genesis block.
	DisableRuntimeRegistration bool `protobuf:"varint,5,opt,name=DisableRuntimeRegistration,proto3" json:"DisableRuntimeRegistration,omitempty"`
	// DisableRuntimeRegistration is true iff key manager runtime registration should be
	// disabled outside of the genesis block.
	DisableKeyManagerRuntimeRegistration bool `protobuf:"varint,6,opt,name=DisableKeyManagerRuntimeRegistration,proto3" json:"DisableKeyManagerRuntimeRegistration,omitempty"`
	// GasCosts are the registry transaction gas costs.
	GasCosts map[string]uint64 `protobuf:"bytes,7,rep,name=GasCosts,proto3" json:"GasCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// MaxNodeExpiration is the maximum number of epochs relative to the epoch
	// at registration time that a single node registration is valid for.
	MaxNodeExpiration uint64 `protobuf:"varint,8,opt,name=MaxNodeExpiration,proto3" json:"MaxNodeExpiration,omitempty"`
}

func (x *RegistryParameters) Reset() {
	*x = RegistryParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryParameters) ProtoMessage() {}

func (x *RegistryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryParameters.ProtoReflect.Descriptor instead.
func (*RegistryParameters) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{0}
}

func (x *RegistryParameters) GetDebugAllowUnroutableAddresses() bool {
	if x != nil {
		return x.DebugAllowUnroutableAddresses
	}
	return false
}

func (x *RegistryParameters) GetDebugAllowTestRuntimes() bool {
	if x != nil {
		return x.DebugAllowTestRuntimes
	}
	return false
}

func (x *RegistryParameters) GetDebugBypassStake() bool {
	if x != nil {
		return x.DebugBypassStake
	}
	return false
}

func (x *RegistryParameters) GetDisableRuntimeRegistration() bool {
	if x != nil {
		return x.DisableRuntimeRegistration
	}
	return false
}

func (x *RegistryParameters) GetDisableKeyManagerRuntimeRegistration() bool {
	if x != nil {
		return x.DisableKeyManagerRuntimeRegistration
	}
	return false
}

func (x *RegistryParameters) GetGasCosts() map[string]uint64 {
	if x != nil {
		return x.GasCosts
	}
	return nil
}

func (x *RegistryParameters) GetMaxNodeExpiration() uint64 {
	if x != nil {
		return x.MaxNodeExpiration
	}
	return 0
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{1}
}

func (x *Entity) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters are the registry consensus parameters.
	Parameters *RegistryParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Entities is the initial list of entities.
	Entities []*Entity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Registry) Reset() {
	*x = Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{2}
}

func (x *Registry) GetParameters() *RegistryParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Registry) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type Slash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount         []byte `protobuf:"bytes,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	FreezeInterval uint64 `protobuf:"varint,2,opt,name=FreezeInterval,proto3" json:"FreezeInterval,omitempty"`
}

func (x *Slash) Reset() {
	*x = Slash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slash) ProtoMessage() {}

func (x *Slash) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slash.ProtoReflect.Descriptor instead.
func (*Slash) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{3}
}

func (x *Slash) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Slash) GetFreezeInterval() uint64 {
	if x != nil {
		return x.FreezeInterval
	}
	return 0
}

type RewardStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Until uint64 `protobuf:"varint,1,opt,name=Until,proto3" json:"Until,omitempty"`
	Scale []byte `protobuf:"bytes,2,opt,name=Scale,proto3" json:"Scale,omitempty"`
}

func (x *RewardStep) Reset() {
	*x = RewardStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardStep) ProtoMessage() {}

func (x *RewardStep) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardStep.ProtoReflect.Descriptor instead.
func (*RewardStep) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{4}
}

func (x *RewardStep) GetUntil() uint64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *RewardStep) GetScale() []byte {
	if x != nil {
		return x.Scale
	}
	return nil
}

type CommissionScheduleRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateChangeInterval uint64 `protobuf:"varint,1,opt,name=RateChangeInterval,proto3" json:"RateChangeInterval,omitempty"`
	RateBoundLead      uint64 `protobuf:"varint,2,opt,name=RateBoundLead,proto3" json:"RateBoundLead,omitempty"`
	MaxRateSteps       int64  `protobuf:"varint,3,opt,name=MaxRateSteps,proto3" json:"MaxRateSteps,omitempty"`
	MaxBoundSteps      int64  `protobuf:"varint,4,opt,name=MaxBoundSteps,proto3" json:"MaxBoundSteps,omitempty"`
}

func (x *CommissionScheduleRules) Reset() {
	*x = CommissionScheduleRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionScheduleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionScheduleRules) ProtoMessage() {}

func (x *CommissionScheduleRules) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionScheduleRules.ProtoReflect.Descriptor instead.
func (*CommissionScheduleRules) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{5}
}

func (x *CommissionScheduleRules) GetRateChangeInterval() uint64 {
	if x != nil {
		return x.RateChangeInterval
	}
	return 0
}

func (x *CommissionScheduleRules) GetRateBoundLead() uint64 {
	if x != nil {
		return x.RateBoundLead
	}
	return 0
}

func (x *CommissionScheduleRules) GetMaxRateSteps() int64 {
	if x != nil {
		return x.MaxRateSteps
	}
	return 0
}

func (x *CommissionScheduleRules) GetMaxBoundSteps() int64 {
	if x != nil {
		return x.MaxBoundSteps
	}
	return 0
}

type StakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thresholds                        map[int64][]byte         `protobuf:"bytes,1,rep,name=Thresholds,proto3" json:"Thresholds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebondingInterval                 uint64                   `protobuf:"varint,2,opt,name=DebondingInterval,proto3" json:"DebondingInterval,omitempty"`
	RewardSchedule                    []*RewardStep            `protobuf:"bytes,3,rep,name=RewardSchedule,proto3" json:"RewardSchedule,omitempty"`
	SigningRewardThresholdNumerator   uint64                   `protobuf:"varint,4,opt,name=SigningRewardThresholdNumerator,proto3" json:"SigningRewardThresholdNumerator,omitempty"`
	SigningRewardThresholdDenominator uint64                   `protobuf:"varint,5,opt,name=SigningRewardThresholdDenominator,proto3" json:"SigningRewardThresholdDenominator,omitempty"`
	CommissionScheduleRules           *CommissionScheduleRules `protobuf:"bytes,6,opt,name=CommissionScheduleRules,proto3" json:"CommissionScheduleRules,omitempty"`
	Slashing                          map[string]*Slash        `protobuf:"bytes,7,rep,name=Slashing,proto3" json:"Slashing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GasCosts                          map[string]uint64        `protobuf:"bytes,8,rep,name=GasCosts,proto3" json:"GasCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MinDelegationAmount               []byte                   `protobuf:"bytes,9,opt,name=MinDelegationAmount,proto3" json:"MinDelegationAmount,omitempty"`
	DisableTransfers                  bool                     `protobuf:"varint,10,opt,name=DisableTransfers,proto3" json:"DisableTransfers,omitempty"`
	DisableDelegation                 bool                     `protobuf:"varint,11,opt,name=DisableDelegation,proto3" json:"DisableDelegation,omitempty"`
	UndisableTransfersFrom            map[string]bool          `protobuf:"bytes,12,rep,name=UndisableTransfersFrom,proto3" json:"UndisableTransfersFrom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// FeeSplitWeightPropose is the proportion of block fee portions that go to the proposer.
	FeeSplitWeightPropose []byte `protobuf:"bytes,13,opt,name=FeeSplitWeightPropose,proto3" json:"FeeSplitWeightPropose,omitempty"`
	// FeeSplitWeightVote is the proportion of block fee portions that go to the validator that votes.
	FeeSplitWeightVote []byte `protobuf:"bytes,14,opt,name=FeeSplitWeightVote,proto3" json:"FeeSplitWeightVote,omitempty"`
	// FeeSplitWeightNextPropose is the proportion of block fee portions that go to the next block's proposer.
	FeeSplitWeightNextPropose []byte `protobuf:"bytes,15,opt,name=FeeSplitWeightNextPropose,proto3" json:"FeeSplitWeightNextPropose,omitempty"`
	// RewardFactorEpochSigned is the factor for a reward distributed per epoch to
	// entities that have signed at least a threshold fraction of the blocks.
	RewardFactorEpochSigned []byte `protobuf:"bytes,16,opt,name=RewardFactorEpochSigned,proto3" json:"RewardFactorEpochSigned,omitempty"`
	// RewardFactorBlockProposed is the factor for a reward distributed per block
	// to the entity that proposed the block.
	RewardFactorBlockProposed []byte `protobuf:"bytes,17,opt,name=RewardFactorBlockProposed,proto3" json:"RewardFactorBlockProposed,omitempty"`
}

func (x *StakingParameters) Reset() {
	*x = StakingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingParameters) ProtoMessage() {}

func (x *StakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingParameters.ProtoReflect.Descriptor instead.
func (*StakingParameters) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{6}
}

func (x *StakingParameters) GetThresholds() map[int64][]byte {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *StakingParameters) GetDebondingInterval() uint64 {
	if x != nil {
		return x.DebondingInterval
	}
	return 0
}

func (x *StakingParameters) GetRewardSchedule() []*RewardStep {
	if x != nil {
		return x.RewardSchedule
	}
	return nil
}

func (x *StakingParameters) GetSigningRewardThresholdNumerator() uint64 {
	if x != nil {
		return x.SigningRewardThresholdNumerator
	}
	return 0
}

func (x *StakingParameters) GetSigningRewardThresholdDenominator() uint64 {
	if x != nil {
		return x.SigningRewardThresholdDenominator
	}
	return 0
}

func (x *StakingParameters) GetCommissionScheduleRules() *CommissionScheduleRules {
	if x != nil {
		return x.CommissionScheduleRules
	}
	return nil
}

func (x *StakingParameters) GetSlashing() map[string]*Slash {
	if x != nil {
		return x.Slashing
	}
	return nil
}

func (x *StakingParameters) GetGasCosts() map[string]uint64 {
	if x != nil {
		return x.GasCosts
	}
	return nil
}

func (x *StakingParameters) GetMinDelegationAmount() []byte {
	if x != nil {
		return x.MinDelegationAmount
	}
	return nil
}

func (x *StakingParameters) GetDisableTransfers() bool {
	if x != nil {
		return x.DisableTransfers
	}
	return false
}

func (x *StakingParameters) GetDisableDelegation() bool {
	if x != nil {
		return x.DisableDelegation
	}
	return false
}

func (x *StakingParameters) GetUndisableTransfersFrom() map[string]bool {
	if x != nil {
		return x.UndisableTransfersFrom
	}
	return nil
}

func (x *StakingParameters) GetFeeSplitWeightPropose() []byte {
	if x != nil {
		return x.FeeSplitWeightPropose
	}
	return nil
}

func (x *StakingParameters) GetFeeSplitWeightVote() []byte {
	if x != nil {
		return x.FeeSplitWeightVote
	}
	return nil
}

func (x *StakingParameters) GetFeeSplitWeightNextPropose() []byte {
	if x != nil {
		return x.FeeSplitWeightNextPropose
	}
	return nil
}

func (x *StakingParameters) GetRewardFactorEpochSigned() []byte {
	if x != nil {
		return x.RewardFactorEpochSigned
	}
	return nil
}

func (x *StakingParameters) GetRewardFactorBlockProposed() []byte {
	if x != nil {
		return x.RewardFactorBlockProposed
	}
	return nil
}

type Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSupply          []byte                                                     `protobuf:"bytes,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	CommonPool           []byte                                                     `protobuf:"bytes,2,opt,name=common_pool,json=commonPool,proto3" json:"common_pool,omitempty"`
	Parameters           *StakingParameters                                         `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Ledger               map[string]*accountpb.Account                              `protobuf:"bytes,4,rep,name=ledger,proto3" json:"ledger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Delegations          map[string]*delegationpb.DelegationEntry                   `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebondingDelegations map[string]*debondingdelegationpb.DebondingDelegationEntry `protobuf:"bytes,6,rep,name=debonding_delegations,json=debondingDelegations,proto3" json:"debonding_delegations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Staking) Reset() {
	*x = Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{7}
}

func (x *Staking) GetTotalSupply() []byte {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

func (x *Staking) GetCommonPool() []byte {
	if x != nil {
		return x.CommonPool
	}
	return nil
}

func (x *Staking) GetParameters() *StakingParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Staking) GetLedger() map[string]*accountpb.Account {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *Staking) GetDelegations() map[string]*delegationpb.DelegationEntry {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *Staking) GetDebondingDelegations() map[string]*debondingdelegationpb.DebondingDelegationEntry {
	if x != nil {
		return x.DebondingDelegations
	}
	return nil
}

type SchedulerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MinValidators is the minimum number of validators that MUST be
	// present in elected validator sets.
	MinValidators int64 `protobuf:"varint,1,opt,name=MinValidators,proto3" json:"MinValidators,omitempty"`
	// MaxValidators is the maximum number of validators that MAY be
	// present in elected validator sets.
	MaxValidators int64 `protobuf:"varint,2,opt,name=MaxValidators,proto3" json:"MaxValidators,omitempty"`
	// MaxValidatorsPerEntity is the maximum number of validators that
	// may be elected per entity in a single validator set.
	MaxValidatorsPerEntity int64 `protobuf:"varint,3,opt,name=MaxValidatorsPerEntity,proto3" json:"MaxValidatorsPerEntity,omitempty"`
	// DebugBypassStake is true iff the scheduler should bypass all of
	// the staking related checks and operations.
	DebugBypassStake bool `protobuf:"varint,4,opt,name=DebugBypassStake,proto3" json:"DebugBypassStake,omitempty"`
	// DebugStaticValidators is true iff the scheduler should use
	// a static validator set instead of electing anything.
	DebugStaticValidators bool `protobuf:"varint,5,opt,name=DebugStaticValidators,proto3" json:"DebugStaticValidators,omitempty"`
	// RewardFactorEpochElectionAny is the factor for a reward
	// distributed per epoch to entities that have any node considered
	// in any election.
	RewardFactorEpochElectionAny []byte `protobuf:"bytes,6,opt,name=RewardFactorEpochElectionAny,proto3" json:"RewardFactorEpochElectionAny,omitempty"`
}

func (x *SchedulerParams) Reset() {
	*x = SchedulerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerParams) ProtoMessage() {}

func (x *SchedulerParams) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerParams.ProtoReflect.Descriptor instead.
func (*SchedulerParams) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{8}
}

func (x *SchedulerParams) GetMinValidators() int64 {
	if x != nil {
		return x.MinValidators
	}
	return 0
}

func (x *SchedulerParams) GetMaxValidators() int64 {
	if x != nil {
		return x.MaxValidators
	}
	return 0
}

func (x *SchedulerParams) GetMaxValidatorsPerEntity() int64 {
	if x != nil {
		return x.MaxValidatorsPerEntity
	}
	return 0
}

func (x *SchedulerParams) GetDebugBypassStake() bool {
	if x != nil {
		return x.DebugBypassStake
	}
	return false
}

func (x *SchedulerParams) GetDebugStaticValidators() bool {
	if x != nil {
		return x.DebugStaticValidators
	}
	return false
}

func (x *SchedulerParams) GetRewardFactorEpochElectionAny() []byte {
	if x != nil {
		return x.RewardFactorEpochElectionAny
	}
	return nil
}

type Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *SchedulerParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{9}
}

func (x *Scheduler) GetParams() *SchedulerParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ConsensusParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutCommit        *durationpb.Duration `protobuf:"bytes,1,opt,name=TimeoutCommit,proto3" json:"TimeoutCommit,omitempty"`
	SkipTimeoutCommit    bool                 `protobuf:"varint,2,opt,name=SkipTimeoutCommit,proto3" json:"SkipTimeoutCommit,omitempty"`
	EmptyBlockInterval   *durationpb.Duration `protobuf:"bytes,3,opt,name=EmptyBlockInterval,proto3" json:"EmptyBlockInterval,omitempty"`
	MaxTxSize            uint64               `protobuf:"varint,4,opt,name=MaxTxSize,proto3" json:"MaxTxSize,omitempty"`
	MaxBlockSize         uint64               `protobuf:"varint,5,opt,name=MaxBlockSize,proto3" json:"MaxBlockSize,omitempty"`
	MaxBlockGas          uint64               `protobuf:"varint,6,opt,name=MaxBlockGas,proto3" json:"MaxBlockGas,omitempty"`
	MaxEvidenceAgeBlocks uint64               `protobuf:"varint,7,opt,name=MaxEvidenceAgeBlocks,proto3" json:"MaxEvidenceAgeBlocks,omitempty"`
	MaxEvidenceAgeTime   string               `protobuf:"bytes,8,opt,name=MaxEvidenceAgeTime,proto3" json:"MaxEvidenceAgeTime,omitempty"`
}

func (x *ConsensusParams) Reset() {
	*x = ConsensusParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusParams) ProtoMessage() {}

func (x *ConsensusParams) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusParams.ProtoReflect.Descriptor instead.
func (*ConsensusParams) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{10}
}

func (x *ConsensusParams) GetTimeoutCommit() *durationpb.Duration {
	if x != nil {
		return x.TimeoutCommit
	}
	return nil
}

func (x *ConsensusParams) GetSkipTimeoutCommit() bool {
	if x != nil {
		return x.SkipTimeoutCommit
	}
	return false
}

func (x *ConsensusParams) GetEmptyBlockInterval() *durationpb.Duration {
	if x != nil {
		return x.EmptyBlockInterval
	}
	return nil
}

func (x *ConsensusParams) GetMaxTxSize() uint64 {
	if x != nil {
		return x.MaxTxSize
	}
	return 0
}

func (x *ConsensusParams) GetMaxBlockSize() uint64 {
	if x != nil {
		return x.MaxBlockSize
	}
	return 0
}

func (x *ConsensusParams) GetMaxBlockGas() uint64 {
	if x != nil {
		return x.MaxBlockGas
	}
	return 0
}

func (x *ConsensusParams) GetMaxEvidenceAgeBlocks() uint64 {
	if x != nil {
		return x.MaxEvidenceAgeBlocks
	}
	return 0
}

func (x *ConsensusParams) GetMaxEvidenceAgeTime() string {
	if x != nil {
		return x.MaxEvidenceAgeTime
	}
	return ""
}

type Consensus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend string           `protobuf:"bytes,1,opt,name=Backend,proto3" json:"Backend,omitempty"`
	Params  *ConsensusParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Consensus) Reset() {
	*x = Consensus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consensus) ProtoMessage() {}

func (x *Consensus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consensus.ProtoReflect.Descriptor instead.
func (*Consensus) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{11}
}

func (x *Consensus) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *Consensus) GetParams() *ConsensusParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height is the block height at which the document was generated.
	Height int64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	// Time is the time the genesis block was constructed.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Time,proto3" json:"Time,omitempty"`
	// ChainID is the ID of the chain.
	ChainID string `protobuf:"bytes,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	// Registry is the registry genesis state.
	Registry *Registry `protobuf:"bytes,4,opt,name=registry,proto3" json:"registry,omitempty"`
	// Staking is the staking genesis state.
	Staking *Staking `protobuf:"bytes,5,opt,name=staking,proto3" json:"staking,omitempty"`
	// Scheduler is the scheduler genesis state.
	Scheduler *Scheduler `protobuf:"bytes,6,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Consensus is the consensus genesis state.
	Consensus *Consensus `protobuf:"bytes,7,opt,name=consensus,proto3" json:"consensus,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{12}
}

func (x *State) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *State) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *State) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *State) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *State) GetStaking() *Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

func (x *State) GetScheduler() *Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *State) GetConsensus() *Consensus {
	if x != nil {
		return x.Consensus
	}
	return nil
}

type GetByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetByHeightRequest) Reset() {
	*x = GetByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByHeightRequest) ProtoMessage() {}

func (x *GetByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetByHeightRequest) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{13}
}

func (x *GetByHeightRequest) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetByHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetByHeightResponse) Reset() {
	*x = GetByHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByHeightResponse) ProtoMessage() {}

func (x *GetByHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByHeightResponse.ProtoReflect.Descriptor instead.
func (*GetByHeightResponse) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{14}
}

func (x *GetByHeightResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

type GetStakingByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// omitting the accounts and delegations decreases response time
	OmitAccountsAndDelegations bool `protobuf:"varint,2,opt,name=omit_accounts_and_delegations,json=omitAccountsAndDelegations,proto3" json:"omit_accounts_and_delegations,omitempty"`
}

func (x *GetStakingByHeightRequest) Reset() {
	*x = GetStakingByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakingByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakingByHeightRequest) ProtoMessage() {}

func (x *GetStakingByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakingByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetStakingByHeightRequest) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{15}
}

func (x *GetStakingByHeightRequest) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetStakingByHeightRequest) GetOmitAccountsAndDelegations() bool {
	if x != nil {
		return x.OmitAccountsAndDelegations
	}
	return false
}

type GetStakingByHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Staking *Staking `protobuf:"bytes,1,opt,name=staking,proto3" json:"staking,omitempty"`
}

func (x *GetStakingByHeightResponse) Reset() {
	*x = GetStakingByHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_state_statepb_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakingByHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakingByHeightResponse) ProtoMessage() {}

func (x *GetStakingByHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_state_statepb_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakingByHeightResponse.ProtoReflect.Descriptor instead.
func (*GetStakingByHeightResponse) Descriptor() ([]byte, []int) {
	return file_grpc_state_statepb_state_proto_rawDescGZIP(), []int{16}
}

func (x *GetStakingByHeightResponse) GetStaking() *Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

var File_grpc_state_statepb_state_proto protoreflect.FileDescriptor

var file_grpc_state_statepb_state_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x62,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x64, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x64, 0x65,
	0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x47, 0x0a, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x6e, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x24,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x61,
	0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x47, 0x61, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x26, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x05, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x52, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0xe8, 0x0a, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x62,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x44, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x21,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x21, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x17, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x4d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x55, 0x6e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x19, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x49, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x55, 0x6e, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x04, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32,
	0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x64, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4b, 0x0a, 0x0b, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76,
	0x0a, 0x19, 0x44, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x42, 0x0a, 0x1c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x79, 0x22, 0x3b, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x54, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x54, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x47, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa0,
	0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x41, 0x0a, 0x1d, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x32, 0xb3, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x69, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x6f, 0x61, 0x73, 0x69, 0x73, 0x2d, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_state_statepb_state_proto_rawDescOnce sync.Once
	file_grpc_state_statepb_state_proto_rawDescData = file_grpc_state_statepb_state_proto_rawDesc
)

func file_grpc_state_statepb_state_proto_rawDescGZIP() []byte {
	file_grpc_state_statepb_state_proto_rawDescOnce.Do(func() {
		file_grpc_state_statepb_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_state_statepb_state_proto_rawDescData)
	})
	return file_grpc_state_statepb_state_proto_rawDescData
}

var file_grpc_state_statepb_state_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_grpc_state_statepb_state_proto_goTypes = []interface{}{
	(*RegistryParameters)(nil),           // 0: state.RegistryParameters
	(*Entity)(nil),                       // 1: state.Entity
	(*Registry)(nil),                     // 2: state.Registry
	(*Slash)(nil),                        // 3: state.Slash
	(*RewardStep)(nil),                   // 4: state.RewardStep
	(*CommissionScheduleRules)(nil),      // 5: state.CommissionScheduleRules
	(*StakingParameters)(nil),            // 6: state.StakingParameters
	(*Staking)(nil),                      // 7: state.Staking
	(*SchedulerParams)(nil),              // 8: state.SchedulerParams
	(*Scheduler)(nil),                    // 9: state.Scheduler
	(*ConsensusParams)(nil),              // 10: state.ConsensusParams
	(*Consensus)(nil),                    // 11: state.Consensus
	(*State)(nil),                        // 12: state.State
	(*GetByHeightRequest)(nil),           // 13: state.GetByHeightRequest
	(*GetByHeightResponse)(nil),          // 14: state.GetByHeightResponse
	(*GetStakingByHeightRequest)(nil),    // 15: state.GetStakingByHeightRequest
	(*GetStakingByHeightResponse)(nil),   // 16: state.GetStakingByHeightResponse
	nil,                                  // 17: state.RegistryParameters.GasCostsEntry
	nil,                                  // 18: state.StakingParameters.ThresholdsEntry
	nil,                                  // 19: state.StakingParameters.SlashingEntry
	nil,                                  // 20: state.StakingParameters.GasCostsEntry
	nil,                                  // 21: state.StakingParameters.UndisableTransfersFromEntry
	nil,                                  // 22: state.Staking.LedgerEntry
	nil,                                  // 23: state.Staking.DelegationsEntry
	nil,                                  // 24: state.Staking.DebondingDelegationsEntry
	(*durationpb.Duration)(nil),          // 25: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 26: google.protobuf.Timestamp
	(*accountpb.Account)(nil),            // 27: account.Account
	(*delegationpb.DelegationEntry)(nil), // 28: delegation.DelegationEntry
	(*debondingdelegationpb.DebondingDelegationEntry)(nil), // 29: debondingdelegation.DebondingDelegationEntry
}
var file_grpc_state_statepb_state_proto_depIdxs = []int32{
	17, // 0: state.RegistryParameters.GasCosts:type_name -> state.RegistryParameters.GasCostsEntry
	0,  // 1: state.Registry.parameters:type_name -> state.RegistryParameters
	1,  // 2: state.Registry.entities:type_name -> state.Entity
	18, // 3: state.StakingParameters.Thresholds:type_name -> state.StakingParameters.ThresholdsEntry
	4,  // 4: state.StakingParameters.RewardSchedule:type_name -> state.RewardStep
	5,  // 5: state.StakingParameters.CommissionScheduleRules:type_name -> state.CommissionScheduleRules
	19, // 6: state.StakingParameters.Slashing:type_name -> state.StakingParameters.SlashingEntry
	20, // 7: state.StakingParameters.GasCosts:type_name -> state.StakingParameters.GasCostsEntry
	21, // 8: state.StakingParameters.UndisableTransfersFrom:type_name -> state.StakingParameters.UndisableTransfersFromEntry
	6,  // 9: state.Staking.parameters:type_name -> state.StakingParameters
	22, // 10: state.Staking.ledger:type_name -> state.Staking.LedgerEntry
	23, // 11: state.Staking.delegations:type_name -> state.Staking.DelegationsEntry
	24, // 12: state.Staking.debonding_delegations:type_name -> state.Staking.DebondingDelegationsEntry
	8,  // 13: state.Scheduler.params:type_name -> state.SchedulerParams
	25, // 14: state.ConsensusParams.TimeoutCommit:type_name -> google.protobuf.Duration
	25, // 15: state.ConsensusParams.EmptyBlockInterval:type_name -> google.protobuf.Duration
	10, // 16: state.Consensus.params:type_name -> state.ConsensusParams
	26, // 17: state.State.Time:type_name -> google.protobuf.Timestamp
	2,  // 18: state.State.registry:type_name -> state.Registry
	7,  // 19: state.State.staking:type_name -> state.Staking
	9,  // 20: state.State.scheduler:type_name -> state.Scheduler
	11, // 21: state.State.consensus:type_name -> state.Consensus
	12, // 22: state.GetByHeightResponse.state:type_name -> state.State
	7,  // 23: state.GetStakingByHeightResponse.staking:type_name -> state.Staking
	3,  // 24: state.StakingParameters.SlashingEntry.value:type_name -> state.Slash
	27, // 25: state.Staking.LedgerEntry.value:type_name -> account.Account
	28, // 26: state.Staking.DelegationsEntry.value:type_name -> delegation.DelegationEntry
	29, // 27: state.Staking.DebondingDelegationsEntry.value:type_name -> debondingdelegation.DebondingDelegationEntry
	13, // 28: state.StateService.GetByHeight:input_type -> state.GetByHeightRequest
	15, // 29: state.StateService.GetStakingByHeight:input_type -> state.GetStakingByHeightRequest
	14, // 30: state.StateService.GetByHeight:output_type -> state.GetByHeightResponse
	16, // 31: state.StateService.GetStakingByHeight:output_type -> state.GetStakingByHeightResponse
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_grpc_state_statepb_state_proto_init() }
func file_grpc_state_statepb_state_proto_init() {
	if File_grpc_state_statepb_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_state_statepb_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionScheduleRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consensus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakingByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_state_statepb_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakingByHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_state_statepb_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_state_statepb_state_proto_goTypes,
		DependencyIndexes: file_grpc_state_statepb_state_proto_depIdxs,
		MessageInfos:      file_grpc_state_statepb_state_proto_msgTypes,
	}.Build()
	File_grpc_state_statepb_state_proto = out.File
	file_grpc_state_statepb_state_proto_rawDesc = nil
	file_grpc_state_statepb_state_proto_goTypes = nil
	file_grpc_state_statepb_state_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateServiceClient interface {
	GetByHeight(ctx context.Context, in *GetByHeightRequest, opts ...grpc.CallOption) (*GetByHeightResponse, error)
	GetStakingByHeight(ctx context.Context, in *GetStakingByHeightRequest, opts ...grpc.CallOption) (*GetStakingByHeightResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetByHeight(ctx context.Context, in *GetByHeightRequest, opts ...grpc.CallOption) (*GetByHeightResponse, error) {
	out := new(GetByHeightResponse)
	err := c.cc.Invoke(ctx, "/state.StateService/GetByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetStakingByHeight(ctx context.Context, in *GetStakingByHeightRequest, opts ...grpc.CallOption) (*GetStakingByHeightResponse, error) {
	out := new(GetStakingByHeightResponse)
	err := c.cc.Invoke(ctx, "/state.StateService/GetStakingByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
type StateServiceServer interface {
	GetByHeight(context.Context, *GetByHeightRequest) (*GetByHeightResponse, error)
	GetStakingByHeight(context.Context, *GetStakingByHeightRequest) (*GetStakingByHeightResponse, error)
}

// UnimplementedStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (*UnimplementedStateServiceServer) GetByHeight(context.Context, *GetByHeightRequest) (*GetByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByHeight not implemented")
}
func (*UnimplementedStateServiceServer) GetStakingByHeight(context.Context, *GetStakingByHeightRequest) (*GetStakingByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingByHeight not implemented")
}

func RegisterStateServiceServer(s *grpc.Server, srv StateServiceServer) {
	s.RegisterService(&_StateService_serviceDesc, srv)
}

func _StateService_GetByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.StateService/GetByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetByHeight(ctx, req.(*GetByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetStakingByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakingByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetStakingByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.StateService/GetStakingByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetStakingByHeight(ctx, req.(*GetStakingByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "state.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByHeight",
			Handler:    _StateService_GetByHeight_Handler,
		},
		{
			MethodName: "GetStakingByHeight",
			Handler:    _StateService_GetStakingByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/state/statepb/state.proto",
}
